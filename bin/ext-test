#!/usr/bin/env node

/*!
 * Ext JS SS Library 0.0.1 
 * Copyright(c) 2006-2010 Ext JS, Inc.
 * licensing@extjs.com
 * http://www.extjs.com/license
 */
 
/**
 * Module dependencies.
 */

var assert = require('assert'),
    sys = require('sys'),
    fs = require('fs')

// Parse arguments

var files = [],
    args = process.argv.slice(2),
    Ext

while (args.length) {
    var arg = args.shift()
    switch (arg) {
        case '-I':
        case '--include':
            if (arg = args.shift()) {
                require.paths.unshift(arg)
            } else {
                throw new Error('--include requires a path')
            }
            break
        case '-r':
        case '--require':
            if (arg = args.shift()) {
                require(arg)
            } else {
                throw new Error('--require requires a path')
            }
            break
        default:
            files.push(arg)
    }
}

// Try loading Ext

try {
    Ext = require('ext')
} catch (err) {
    Ext = {}
}

// Alias deepEqual as eql for complex equality

assert.eql = assert.deepEqual

// Proxy assert.equal() for string diffs

var origEqual = assert.equal
assert.equal = function(a, b, msg) {
    if (typeof a === 'string' &&
        typeof b === 'string') {
        try {
            origEqual.apply(this, arguments)
        } catch (err) {
            var diff = ''
            for (var i = 0, len = b.length; i < len; ++i) {
                if (b[i] === a[i]) {
                    diff += b[i]
                } else {
                    diff += '\u001B[31m' + b.substr(i) + '\u001B[0m'
                    break
                }
            }
            err.message = '\n' + a + '\n==\n' + diff
            throw err
        }    
    } else {
        origEqual.apply(this, arguments)
    }
}

// Report test coverage when available

process.addListener('exit', function(){
    sys.puts('')
    if (typeof _$jscoverage === 'object') {
        reportCoverage(_$jscoverage)
    }
})

/**
 * Report test coverage.
 *
 * @param  {Object} cov
 * @api private
 */

function reportCoverage(cov) {
    populateCoverage(cov)
    sys.puts('\n   Test Coverage')
    var sep = '   +--------------------------------+----------+------+------+--------+',
        lastSep = '                                    +----------+------+------+--------+'
    sys.puts(sep)
    sys.puts('   | filename                       | coverage | LOC  | SLOC | missed |')
    sys.puts(sep)
    for (var name in cov) {
        var file = cov[name]
        if (file instanceof Array && name !== 'ext/test.js') {
            sys.printf('   | %-31s| %7.2f% | %4d | %4d | %6d |\n', 
                name,
                file.coverage,
                file.LOC,
                file.SLOC,
                file.totalMisses)
        }
    }
    sys.puts(sep)
    sys.printf('     %-31s| %7.2f% | %4d | %4d | %6d |\n', 
        '',
        cov.coverage,
        cov.LOC,
        cov.SLOC,
        cov.totalMisses)
    sys.puts(lastSep)
}

/**
 * Populate code coverage data.
 *
 * @param  {Object} cov
 * @api private
 */

function populateCoverage(cov) {
    cov.LOC = 
    cov.SLOC =
    cov.totalFiles =
    cov.totalHits =
    cov.totalMisses = 
    cov.coverage = 0
    for (var name in cov) {
        var file = cov[name]
        if (file instanceof Array && name !== 'ext/test.js') {
            ++cov.totalFiles
            cov.totalHits += file.totalHits = file.select(function(hits){ return hits }).length
            cov.totalMisses += file.totalMisses = file.select(function(hits){ return !hits }).length
            file.totalLines = file.totalHits + file.totalMisses
            cov.SLOC += file.SLOC = file.totalLines
            cov.LOC += file.LOC = file.source.length
            file.coverage = (file.totalHits / file.totalLines) * 100
        }
    }
    cov.coverage = (cov.totalHits / cov.SLOC) * 100
}

/**
 * Assert that the given array-like object
 * is empty (length of 0).
 *
 * @param  {Array} arr
 * @api public
 */

assert.empty = function(arr, msg) {
    assert.equal(arr.length, 0, msg)
}

/**
 * Add a test suite with the given title and object
 * containing keyed functions.
 * 
 *
 * @param  {String} title
 * @param  {Object} tests
 * @api public
 */

Ext.test = function(title, tests) {
    runSuite(title, tests)
}

/**
 * Run all test files.
 *
 * @param  {Array} files
 * @api public
 */

function run(files) {
    global.Ext = Ext
    if (!files.length) throw new Error('test files required')
    files.forEach(function(file){
        require(process.cwd() + '/' + file.replace('.js', ''))
    })
}

/**
 * Returns the total number of tests,
 * used for reporting.
 *
 * @param  {Object} tests
 * @return {Number} returns number of tests
 * @api private
 */

function count(tests) {
    var n = 0
    for (var key in tests) {
        if (typeof tests[key] !== 'function') continue
        ++n
    }
    return n
}

/**
 * Run the given tests.
 *
 * @param  {String} title
 * @param  {Object} tests
 * @api private
 */

function runSuite(title, tests) {
    var current = 0,
        total = count(tests)
    for (var key in tests) {
        var test = tests[key]
        if (typeof test !== 'function') continue
        var percent = Math.round(++current / total * 100)
        sys.print('\u001B[K   %' + percent + ' \u001B[1m' + title + '\u001B[0m ' + key + '\r')
        try {
            var val = test()
        } catch (err) {
            sys.puts('\u001B[Kin ' + title + ' ' + key + ':')
            throw err
        }
        if (val instanceof Function) {
            process.addListener('exit', val)
        }
    }
}

// Run test files

run(files)
