#!/usr/bin/env node

/*!
 * Ext JS Connect
 * Copyright(c) 2010 Ext JS, Inc.
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var http = require('http'),
    sys = require('sys'),
    fs = require('fs'),
    cwd = process.cwd();

/**
 * Environment defaults.
 */

var env = exports.env = {
    name: process.env.CONNECT_ENV || 'development',
    logfile: 'logs/connect.log',
    pidfile: 'pids/connect.pid',
    port: 3000,
    host: null
};

/**
 * Daemonize the process.
 */

var daemonize;

/**
 * Verbose output.
 */

var verbose;

/**
 * App module path.
 */

var appPath;

/**
 * Colored terminal output.
 */

var useColors = true;

/**
 * Argument vector.
 */

var args = process.argv.slice(2);

/**
 * Usage documentation.
 */

var usage = ''
    + '[bold]{Usage}: connect [options] start|stop|restart\n'
    + '\n'
    + '[bold]{Options}:\n'
    + '  -H, --host ADDR      Host address, defaults to INADDR_ANY\n'
    + '  -p, --port NUM       Port number, defaults to 3000\n'
    + '  -D, --daemonize      Daemonize the server process\n'
    + '  -I, --include PATH   Unshift the given path to require.paths\n'
    + '  -E, --env NAME       Set environment, defaults to "development"\n'
    + '  -e, --eval CODE      Evaluate the given string\n'
    + '  -C, --chdir PATH     Change to the given path\n'
    + '  -c, --config PATH    Load configuration module\n'
    + '  -P, --pidfile PATH   PID file, defaults to pids/connect.pid\n'
    + '  -l, --logfile PATH   Log file, defaults to logs/connect.log\n'
    + '  -u, --user ID        Change user with setuid()\n'
    + '  -g, --group ID       Change group with setgid()\n'
    + '  -v, --verbose        Display verbose output\n'
    + '  -K, --no-color       Suppress colored terminal output\n'
    + '  -h, --help           Display help information\n';

/**
 * Log the given msg to stderr.
 *
 * @param  {String} msg
 */

function log(msg){
    if (verbose) sys.error('... ' + colorize(msg));
}

/**
 * Colorize the given string when color is enabled,
 * otherwise strip placeholders.
 *
 * @param  {String} str
 * @return {String}
 */

function colorize(str){
    var colors = useColors
        ? { bold: 1 }
        : {};
    return str.replace(/\[(\w+)\]\{([^}]+)\}/g, function(_, color, str){
        return '\x1B[' + colors[color] + 'm' + str +'\x1B[0m';
    });
}

/**
 * Exit with the given message.
 *
 * @param  {String} msg
 * @param  {Number} code
 */

function abort(msg, code){
    sys.error(colorize(msg));
    process.exit(code || 1);
}

/**
 * Return shifted argument, or
 * abort with the given prefix.
 *
 * @param  {String} prefix
 * @return {String}
 */

function requireArg(prefix){
    if (args.length) {
        return args.shift();
    } else {
        abort(prefix + ' requires an argument.');
    }
}

/**
 * Load the given configuration file.
 *
 * @param  {String} file
 */

function loadConfig(file){
    file = process.cwd() + '/' + file;
    log('loading config [bold]{`' + file + "'}");
    var config = require(file),
        keys = Object.keys(config);
    for (var i = 0, len = keys.length; i < len; ++i) {
        env[keys[i]] = config[keys[i]];
    }
}

/**
 * Stop the process when running.
 */

function stop(){
    try {
        log('stopping');
        var pid = parseInt(fs.readFileSync(env.pidfile), 10);
        process.kill(pid);
        log('killed [bold]{' + pid + '}');
    } catch (err) {
        if (err.message === 'No such process') {
            log('[bold]{' + pid + '} is not running')
        } else if (err.errno === process.ENOENT) {
            log('[bold]{' + err.path + '} does not exist');
        } else {
            throw err;
        }
    }
}

/**
 * Check if the given path exists (sync).
 *
 * @param  {String} path
 * @return {Boolean}
 */

function exists(path){
    try { 
        return fs.statSync(path);
    } catch (err) {
        return false;
    }
}

/**
 * Start the process.
 */

function start(){
    log('starting');
    var path = process.cwd() + '/' + (appPath || '');
    
    // App path not given, try app.js and server.js
    if (!appPath) {
        if (exists(path + 'app.js')) {
            log('detected app.js');
            path += 'app';
        } else if (exists(path + 'server.js')) {
            log('detected server.js');
            path += 'server';
        } else {
            abort('app not found, pass a module path, or create {app,server}.js');
        }
    }
    
    // Load the app module
    var app = require(path);
    
    // Ensure it exports properly
    if (app instanceof http.Server) {
        if (daemonize) {
            log('daemonizing process [bold]{' + process.pid + '}');
            
            // Change working directory
            process.chdir('/');
            
            // Write out pid
            log('writing pid to [bold]{' + env.pidfile + '}');
            fs.writeFile(env.pidfile, process.pid.toString(), 'ascii');
            
            // Reset umask
            process.umask(0);
            
            // Set uid
            if (env.uid) {
                log('running as user ' + env.uid);
                process.setuid(env.uid);
            }
            
            // Set gid
            if (env.gid) {
                log('running as group ' + env.gid);
                process.setgid(env.gid);
            }
            
            // Ignore SIGHUP
            process.addListener('SIGHUP', function(){ /* ignore */ });
            
            // Redirect streams
            // var errlog = env.logfile.replace(/(\.log)?$/, '.error$1');
            // TODO: freopen() not supported in node yet
            // TODO: sess / proc group leader
            // TODO: fork
        }
        app.env = env;
        sys.error('Connect server listening on http://'
            + (env.host || '*') + ':' + env.port
            + ' in ' + env.name + ' mode');
        app.listen(env.port, env.host);
    } else {
        abort("invalid application:\n"
            + "at: `" + path + "'\n"
            + "must export a Server such as `module.exports = http.createServer(...);'\n");
    }
}

/**
 * Parse the arguments.
 */

function parseArguments(){
    var arg,
        cmd = 'start';
    while (args.length) {
        switch (arg = args.shift()) {
            case '-h':
            case '--help':
                abort(usage);
                break;
            case '-I':
            case '--include':
                require.paths.unshift(requireArg('--include'));
                break;
            case '-e':
            case '--eval':
                eval(requireArg('--eval'));
                break;
            case '-p':
            case '--port':
                env.port = parseInt(requireArg('--port'), 10);
                break;
            case '-H':
            case '--host':
                env.host = requireArg('--host');
                break;
            case '-u':
            case '--user':
                env.uid = parseInt(requireArg('--user'), 10);
                break;
            case '-g':
            case '--group':
                env.gid = parseInt(requireArg('--group'), 10);
                break;
            case '-C':
            case '--chdir':
                process.chdir(requireArg('--chdir'));
                break;
            case '-l':
            case '--logfile':
                env.logfile = requireArg('--logfile');
                break;
            case '-E':
            case '--env':
                env.name = requireArg('--env');
                break;
            case '-P':
            case '--pidfile':
                env.pidfile = requireArg('--pidfile');
                break;
            case '-c':
            case '--config':
                loadConfig(requireArg('--config'));
                break;
            case '-v':
            case '--verbose':
                verbose = true;
                break;
            case '-K':
            case '--no-color':
                useColors = false;
                break;
            case '-D':
            case '--daemonize':
                daemonize = true;
                break;
            case 'stop':
            case 'start':
            case 'restart':
                cmd = arg;
                break;
            default:
                appPath = arg;
        }
    }
    
    // Run the command
    
    switch (cmd) {
        case 'stop':
            stop();
            break;
        case 'start': 
            start();
            break;
        case 'restart': 
            stop();
            start();
            break;
    }
};

// Show help when no arguments are present

if (args.length) {
    parseArguments();
} else {
    abort(usage);
}