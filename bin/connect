#!/usr/bin/env node

/*!
 * Ext JS Connect
 * Copyright(c) 2010 Ext JS, Inc.
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var sys = require('sys'),
    fs = require('fs');

/**
 * Default environment.
 */

var env = {
    port: 3000,
    host: null
};

/**
 * Argument vector.
 */

var args = process.ARGV.slice(2);

/**
 * Usage documentation.
 */

var usage = ''
    + 'Usage: connect [options] start|stop|restart\n'
    + '\n'
    + 'Options:\n'
    + '  -H, --host addr      Host address, defaults to INADDR_ANY\n'
    + '  -p, --port num       Port number, defaults to 3000\n'
    + '  -I, --include path   Unshift the given path to require.paths\n'
    + '  -e, --eval code      Evaluate the given string\n'
    + '  -h, --help           Display help information\n';

/**
 * Exit with the given message.
 *
 * @param  {String} msg
 * @param  {Number} code
 */

function abort(msg, code){
    sys.error(msg);
    process.exit(code || 1);
}

/**
 * Return shifted argument, or
 * abort with the given prefix.
 *
 * @param  {String} prefix
 * @return {String}
 */

function requireArg(prefix){
    if (args.length) {
        return args.shift();
    } else {
        abort(prefix + ' requires an argument.');
    }
}

/**
 * Parse the arguments.
 */

(function parseArguments(){
    var arg = args.shift();
    switch (arg) {
        case '-h':
        case '--help':
            abort(usage);
            break;
        case '-I':
        case '--include':
            require.paths.unshift(requireArg('--include'));
            break;
        case '-e':
        case '--eval':
            eval(requireArg('--eval'));
            break;
        case '-p':
        case '--port':
            env.port = requireArg('--port');
            break;
        case '-H':
        case '--host':
            env.host = requireArg('--host');
            break;
        default:
            abort('start, stop, or restart required');
    }
})();