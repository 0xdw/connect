.\" generated with Ronn/v0.5
.\" http://github.com/rtomayko/ronn/
.
.TH "CONNECT" "1" "June 2010" "" ""
.
.SH "NAME"
\fBconnect\fR \-\- node server runner
.
.SH "Synopsis"
.
.nf

connect [\-H|\-\-host ADDR] [\-p|\-\-port NUM]
        [\-D|\-\-daemonize] [\-I|\-\-include PATH]
        [\-E|\-\-env NAME] [\-e|\-\-eval CODE] [\-C|\-\-chdir PATH]
        [\-c|\-\-config PATH] [\-P|\-\-pidfile PATH]
        [\-l|\-\-logfile PATH] [\-u|\-\-user ID] [\-g|\-\-group ID]
        [\-v|\-\-verbose] [\-K|\-\-no\-color] [\-h|\-\-help]
        start|stop|restart [PATH]
.
.fi
.
.SH "Description"
 \fBConnect\fR is a duel purpose library, aiding in both rapid development,
 and deployment of node servers. Connect "middleware" can be stacked
 to create a robust application within minutes. The \fIconnect\fR executable
 supports launching of both regular \fBnet.Server\fR, and \fBconnect.Server\fR instances.
.
.P
 \fIconnect\fR supplies \fIinit.d\fR friendly \fIstart\fR, \fIstop\fR, and \fIrestart\fR commands,
 and accept a direct path to the module meant to be run, otherwise defaults
 to trying both \fIapp.js\fR and \fIserver.js\fR in the current working directory.
.
.SH "Executable Options"
.
.nf

\-H, \-\-host ADDR      Host address, defaults to INADDR_ANY
\-p, \-\-port NUM       Port number, defaults to 3000
\-D, \-\-daemonize      Daemonize the server process
\-I, \-\-include PATH   Unshift the given path to require.paths
\-E, \-\-env NAME       Set environment, defaults to "development"
\-e, \-\-eval CODE      Evaluate the given string
\-C, \-\-chdir PATH     Change to the given path
\-c, \-\-config PATH    Load configuration module
\-P, \-\-pidfile PATH   PID file, defaults to pids/connect.pid
\-l, \-\-logfile PATH   Log file, defaults to logs/connect.log
\-u, \-\-user ID        Change user with setuid()
\-g, \-\-group ID       Change group with setgid()
\-v, \-\-verbose        Display verbose output
\-K, \-\-no\-color       Suppress colored terminal output
\-h, \-\-help           Display help information
.
.fi
.
.SH "Middleware"
 Connect middleware is divided into two concepts. First we have \fIfilters\fR
 which perform an action and allow lower middleware to respond
 to the request, secondly we have \fIproviders\fR which are conceptual "end\-points",
 responding to the request without continuing down the stack.
.
.SH "Middleware Usage"
 Below is an example which shows usage of the \fIlog\fR filter
 bundled with \fBConnect\fR, as well as the \fIstatic\fR provider.
.
.P
 The keys \fIfilter\fR and \fIprovider\fR are used only as short\-cuts
 to bundled middleware, to utilize a custom module we can
 assign a module's exports to the \fBmodule\fR key.
.
.IP "" 4
.
.nf

module.exports = require('./lib/connect').createServer([
    { filter: 'log' },
    { module: require('path/to/custom/middleware') },
    { provider: 'static', root: __dirname + '/public' }
]);
.
.fi
.
.IP "" 0
.
.P
 As shown above the module exports a \fBconnect.Server\fR and
 does not call the \fBlisten()\fR method directly. This allows other
 modules to "mount" this app, as well as allowing the \fIconnect\fR
 executable to control how the server is run.
.
.P
 If you prefer not to use \fIconnect\fR, you can simply create a script
 executable by \fInode\fR, \fBrequire()\fR the app, then invoke \fBlisten()\fR.
.
.IP "" 4
.
.nf

#!/usr/bin/env node
require('./app').listen();
.
.fi
.
.IP "" 0

